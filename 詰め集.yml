# コードレビューでの指摘事項まとめ

## アーキテクチャ・設計

### 関心の分離
- **ユーティリティ関数の分類**: MapLibre GL特有の機能と純粋な地図データ処理を分離する
  - `mapHelpers.ts`: 純粋な地図データ処理（GeoJSON生成、マーカー色計算など）
  - `maplibreHelpers.ts`: MapLibre GL依存の機能（座標変換、フィーチャー検出など）

### 汎用性の維持
- **アプリケーション固有の実装を汎用ヘルパーに含めない**
  - 特定のレイヤー名（`'route-line'`）にハードコードされた関数は汎用ヘルパーに適さない
  - アプリケーション固有のロジックは使用箇所で明示的に記述する

## 関数設計

### パラメータの柔軟性
- **ハードコーディングの回避**
  - マジックナンバー（例：`1.5`倍率）をパラメータ化する
  - 設定可能なオプションを提供する（`clickRadiusMultiplier`, `clickRadiusPixels`）

### 関数の責任範囲
- **MapRef依存の明確化**
  - MapLibre GLのAPIに依存する関数は、その依存関係を明確にする
  - 純粋な計算ロジックとレンダリング依存の処理を分離する

## ドキュメンテーション

### コメントの正確性
- **実装と一致するコメントを記述**
  - 関数が実際に何をするかを正確に記述する
  - 制限事項や注意点を明記する（例：ルートポイントの存在チェックを行わない）

### JSDocの活用
- **詳細なパラメータ説明**
  - パラメータの型、単位、デフォルト値を明記
  - オプションの各プロパティの役割を説明
  - 戻り値の意味を明確にする

### 使用例の提供
- **deprecatedな関数には移行方法を示す**
  - 代替手段の具体的な使用例を提供
  - 移行が容易になるような情報を含める

## テスト設計

### テストの分離
- **機能別にテストファイルを分割**
  - 純粋な関数とMapLibre GL依存の関数で分ける
  - 責任範囲に応じたテストケースを作成

### モックの適切な使用
- **外部依存をモック化**
  - MapLibre GLのAPIをモックして単体テストを可能にする
  - 境界値や異常系のテストケースを含める

## リファクタリング指針

### 段階的な改善
- **後方互換性を保ちつつ段階的に改善**
  - `@deprecated`タグを使用して移行を促す
  - 新しい汎用的な実装を提供してから古い実装を削除

### 不要な抽象化の回避
- **単純なラッパー関数は削除**
  - 汎用的な関数を直接使用する方が明確
  - 中間レイヤーが価値を提供しない場合は排除

## 命名とコメント

### 日本語コメントの活用
- **プロジェクトの方針に従って日本語でコメントを記述**
  - 複雑なロジックや制限事項を日本語で明確に説明
  - 技術的な詳細も含めて理解しやすくする

### 関数名の明確性
- **関数名が実際の動作を正確に表現**
  - 誤解を招く可能性のある名前は避ける
  - 実装の詳細を隠蔽しすぎない適切な抽象レベルを保つ